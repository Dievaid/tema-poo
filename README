Temă -> Programare orientată pe obiecte
Student -> Capragiu David-Andrei, 324CA

Organizarea codului:

     Pentru evitarea codului de tip boilerplate, am folosit librăria lombok.
          -> Ulterior am creat un branch în care nu se mai folosește lombok datorită erorilor de pe vmchecker :)

     Pentru accesul la baza de date de oriunde la runtime, m-am gândit că cel mai bine ar fi să folosesc
Singleton pattern. (clasa Database din pachetul "functionalities")

     Clasele au fost distribuite în pachete asociate unui scop specific:
          - în pachetul "models" se găsesc entitățile Actor și User
               -> "models" conține două subpachete, "comparator" în care am creat
               niște clase utile pentru diferite sortări precum a unui videoclip 
               după numărul de vizionări în care sunt plasate doar titlul ți numărul asociat de vizionări, și
               "playable" unde se vor găsi clasa abstractă Video, și cele două clase care o moștenesc,
               Movie și Series
          
          - în pachetul "functionalities" este implementată baza de date ca fiind un singleton,
          DataProcessor care conține o metodă de executare a acțiunilor, o metodă utilă de sortare a
          Map-urilor după valori și două metode pentru aplicare a filtrelor pentru videoclipuri și actori
               -> în subpachetul "data" se va găsi clasa Data ce conține metode pentru încărcarea datelor din input
               -> în subpachetul "tasks" sunt implementate cerințele în clase cu nume specifice :
                    -> Command, Query, Recommend în care fiecare metodă implementată întoarce un json object ce conține
                    id-ul acțiunii și un mesaj aferent tipului de acțiune

          Clasele din functionalities conțin metode statice pentru lizibilitatea codului când sunt apelate
     
     Procesarea datelor se va face cu metoda "execute" din DataProcessor după copierea datelor în baza de date în clasa Main
